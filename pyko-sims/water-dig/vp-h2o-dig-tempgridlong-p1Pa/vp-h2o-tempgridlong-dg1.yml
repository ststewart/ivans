# =======================
# pyKO configuration file
# =======================
# ===>>>> Exponential numbers: put a zero after the decimal point and before the e or E <<<<===
# yaml does not always process exponential notation as a number and can mistakenly load as a string
# check your input parameters, especially is using mixed units:
#       import pyko
#       import eos_table as etab      <<-- needed if using SESAME tables
#       run = RunClass()
#       run.checkinput('filename')
#
# --------------------------------------------------------------------
# I/O PARAMETERS
#
# problem name; output file name; output file format 'BIN' or 'ASC'
name           : 'Water plume expands into dusty ideal gas 0.1 Pa'
outputfilename : './vp-h2o-tempgrid-p1Pa/grid-'
outputformat   : 'BIN'
#
# tstop = stop time for the problem
# if dtstart is >0 then it overrides the internal calculation for the first time step; used to match fortran KO output
# dtoutput = output snapshot frequency in time
tstop      : 14400
dtstart    : 1.E-1
dtoutput   : 50.
#
# --------------------------------------------------------------------
# MATERIAL PROPERTIES AND GRIDDING PARAMETERS
#
mat1:
    mesh:
        cells  :  100
        xstart :  0.0
        length :  25.E3
    init:
        up0    : 0.0
        rho0   : 2330.
        p0     : 40362579129.43459
        e0     : 7714018.042239164
        #c0     : 10530.8051
    eos: 
        name   : 'ANEOS H2O'
        type   : 'SES'
        path    : '../aneos-water/'
        filestd : 'NEW-SESAME-STD.TXT'
        fileext : 'NEW-SESAME-EXT.TXT'
    str:
        type   : 'HYDRO'
mat2:
    mesh:
        cells  :  400
        xstart :  25.E3
        length :  100000.E3
    init:
        up0    : 0.0
        rho0   : 4.e-07
        p0     : 0.13668722
        e0     : 954295.10891903
    eos: 
        name   : 'DIG 1'
        type   : 'DIG'
        gamma  : 1.35808424
        cv     : 4771.4755446
        rhog   : 2.E-7
        rhod   : 3000
        cvg    : 8542.951089190301
        cvd    : 1000
        Z      : 6.66666667e-11
        kdust  : 0.5
    str:
        type   : 'HYDRO'
##
# --------------------------------------------------------------------
# DOMAIN PARAMETERS
#
# 'FIXED' or 'FREE'
# ibc = inner boundary condition (at minimum x); obc = outer boundary condition (at maximum x)
# fracture and interior gaps are not implemented yet
boundaries: 
    ibc    : 'FIXED'
    obc    : 'FIXED'
#
# 'PLA' = planar; 'CYL' = cylindrical; 'SPH' = spherical
geometry   : 'SPH'
#geometry   : 'PLA'
#
# gravitational acceleration; negative means force toward negative position x
# gravity is not implemented yet
gravity    : 0.0
#
# void pressure
pvoid      : 0.1
# --------------------------------------------------------------------
# UNITS
#
# user input parameters units
# Provide the units for the user configuration parameters.
# This feature is provided for user convenience and allows for entering material parameters in more natural mixed units.
# The user parameter values will be converted to self-consistent code units during input processing.
# Output file units will be the same as the input units and included in the binary pickle files using the pint package.
# mesh definition units must be the same.
# s2 is the quadratic term for the Mie Grueneisen EOS
# here mks because life is easier in consistent units
units:
    time        : 'second'
    length      : 'meter'
    velocity    : 'meter/second'
    density     : 'kg/m^3'
    mass        : 'kg'
    pressure    : 'Pa'
    temperature : 'K'
    energy      : 'J'
    sp_energy   : 'J/kg'
    sp_entropy  : 'J/K/kg'
    sp_heat_cap : 'J/kg/K'
    gravity     : 'm/s^2'
    s2          : 'second/meter'
    strain_rate     : '1/microseconds'
#
# EOS table units
# These are the units for the Stewart Group ANEOS tables.
# The table units will be converted to code units during input processing.
tableunits:
    # in NEW-SESAME-STD.TXT
    density      : 'g/cm^3'
    temperature  : 'K'
    pressure     : 'GPa'
    sp_energy    : 'MJ/kg'
    hfree_energy : 'MJ/kg'
    # in NEW-SESAME-EXT.TXT (also includes a phase identification flag)
    sp_entropy   : 'MJ/K/kg'
    sound_speed  : 'cm/s'
    sp_heat_cap  : 'MJ/kg/K'
#
# code units
# The routine that sets up the master run class object converts all inputs into code units,
# including converting any EOS table units to code units.
# These are the default set of code units for the original KO code.
# Energy: 1 eu = 10^12 ergs
# Pressure: 10^12 dynes/cm^2 = 100 kJ = 1 megabar     -> P=E/V : dynes/cm^2 = erg/cm^3
# Internal energy per original volume = 10^12 ergs/cm^3 = eu/cm^3 = 100 GJ/m^3
# Heat capacity per original volume = 10^12 ergs/cm^3/K = eu/cm^3/K = 100 GJ/m^3/K
# Velocity = cm/microseconds = 10 km/s
# Note that these units need to be declared with a coefficient of 1 (no scaling factor)
# Scaling factors are declared using the pint define command within function readinput_yaml:
#     ureg.define('eu = 1.0E12 ergs')   # energy unit
codeunits:
    time            : 'microseconds'
    length          : 'cm'
    mass            : 'g'
    density         : 'g/cm^3'
    relative_volume : 'dimensionless' 
    velocity        : 'cm/microsecond'
    pressure        : 'megabar'
    temperature     : 'K'
    energy          : 'eu'
    sp_energy       : 'eu/g'
    sp_heat_cap     : 'eu/K/g'
    sp_entropy      : 'eu/K/g'
    ie_perv0        : 'eu/cm^3'
    cv_perv0        : 'eu/cm^3/K'
    gravity         : 'cm/microseconds^2'
    s2              : 'microseconds/cm'
    strain_rate     : '1/microseconds'
# It is possible to change the code units to a different self-consistent set of units.
# The code units presented here set up the initialization routine for the problem domain.
# Changing to a different set of units should work but has not been tested yet.
# Do not make modifications to the central code routines 
# that make the code dependent on a specific set of units.
# --------------------------------------------------------------------
#
# =========================
# end of configuration file
# =========================